datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

//TODO - Shift to UUID when you don't need to do manual SQL queries anymore
model User {
  id              String          @id @default(cuid())
  human           Boolean         @default(true)
  initialized     Boolean         @default(false)
  friendId        String          @unique @default(cuid())
  currentServer   String?
  currentChannel  String?         
  name            String?
  username        String?         @unique
  email           String?         @unique
  emailVerified   DateTime?
  image           String?         @db.Text
  password        String?
  statusMessage   String?
  status          String?
  activity        String?
  accounts        Account[]

  servers Server[]
  members Member[]
  channels Channel[]
  personalBots PersonalBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalBot {
  id                       String  @id @default(cuid())
  name                     String
  profileDescription       String? @db.Text
  imageUrl                 String? @db.Text
  modelName                String
  systemPrompt             String  @db.Text
  deleted                  Boolean @default(false)

  creatorId                String
  creator                  User @relation(fields: [creatorId], references: [id])

  messages                 BotMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model BotMessage {
  id                       String  @id @default(cuid())
  content                  String  @db.Text
  deleted                  Boolean @default(false)

  botId                    String
  bot                      PersonalBot @relation(fields: [botId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([botId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
//TODO: swap to uuid during MVP
model Server {
  id String @id @default(cuid())
  name String
  imageUrl String       @db.Text
  inviteCode String     @unique

  userId String
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  // TODO: replace cuid with uuid after MVP
  id String           @id @default(cuid())
  role MemberRole     @default(GUEST)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields:[serverId], references: [id], onDelete: Cascade)
  
  messages Message[]

  directMessages Dm[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
}

model Channel {
  //TODO: Switch to uuid in MVP
  id String          @id @default(cuid())
  name String
  type ChannelType   @default(TEXT)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([userId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references:[id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references:[id], onDelete: Cascade)

  directMessages Dm[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model Dm {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}